abstract class RoutePaths {
  static const home        = '/';
  static const authLogin   = '/auth/login';
  static const authRegister= '/auth/register';
}

abstract class RouteNames {
  static const home        = 'home';
  static const authLogin   = 'authLogin';
  static const authRegister= 'authRegister';
  static const unit        = 'unit';
}
import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:sailantro/features/auth/presentation/cubits/auth_cubit.dart';
import 'package:sailantro/features/auth/presentation/cubits/auth_state.dart';

class AuthNotifier extends ChangeNotifier {

  final AuthCubit _authCubit;
  late final StreamSubscription<AuthState> _authSubscription;

  AuthNotifier(this._authCubit) {
    _authSubscription = _authCubit.stream.listen((_) {
      notifyListeners();
    });
  }

  @override
  void dispose() {
    _authSubscription.cancel();
    super.dispose();
  }
}
import 'package:sailantro/core/router/routes.dart';
import 'package:sailantro/features/auth/presentation/pages/register_page.dart';

import '../../features/auth/presentation/components/auth_progress_indicator.dart';
import '../../features/auth/presentation/cubits/auth_cubit.dart';
import '../../features/auth/presentation/cubits/auth_state.dart';
import '../../features/auth/presentation/pages/login_page.dart';
import '../../features/home/presentation/pages/home_page.dart';
import 'auth_notifier.dart';
import 'package:go_router/go_router.dart';

class AppRouter {
  static GoRouter router(AuthCubit authCubit) {
    return GoRouter(
      debugLogDiagnostics: true,
      refreshListenable: AuthNotifier(authCubit),
      initialLocation: RoutePaths.home,
      routes: [
        GoRoute(
          path: RoutePaths.home,
          builder: (context, state) => const HomePage(),
        ),
        GoRoute(path: RoutePaths.authLogin, builder: (context, state) => const LoginPage()),
        GoRoute(path: RoutePaths.authRegister, builder: (context, state) => const RegisterPage()),
      ],
      redirect: (context, state) {
        final authState = authCubit.state;

        final isAuthRoute = state.matchedLocation == RoutePaths.authLogin
            || state.matchedLocation == RoutePaths.authRegister;

        if (authState is Unauthenticated || authState is AuthError) {
          return isAuthRoute ? null : RoutePaths.authLogin;
        }

        if (authState is Authenticated && isAuthRoute) {
          return RoutePaths.home;
        }
        return null;
      },
    );
  }
}
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import '../../../auth/presentation/cubits/auth_cubit.dart';

class HomePage extends StatelessWidget {
  const HomePage({super.key});

  @override
  Widget build(BuildContext context) {
    return  Scaffold(
      appBar: AppBar(
        title: Text("Home Page"),
        actions: [
          IconButton(onPressed: (){
            final authCubit = context.read<AuthCubit>();
            authCubit.logout();
          }, icon: Icon(Icons.logout))
        ],
      ),
     );
  }
}
import 'package:firebase_auth/firebase_auth.dart';
import 'package:sailantro/features/auth/domain/models/app_user.dart';
import 'package:sailantro/features/auth/domain/repository/auth_repository.dart';

class FirebaseAuthRepository implements AuthRepository {
  final FirebaseAuth firebaseAuth = FirebaseAuth.instance;

  @override
  Future<void> deleteAccount() async {
    try {
      final user = firebaseAuth.currentUser;
      if (user == null) throw Exception("No user logged in..");
      await user.delete();
      await logout();
    } catch (e) {
      throw Exception('User deletion failed: $e');
    }
  }

  @override
  Future<AppUser?> getCurrentUser() async {
    final user = firebaseAuth.currentUser;
    if (user == null) return null;
    return AppUser(uid: user.uid, email: user.email!);
  }

  @override
  Future<AppUser?> loginWithEmailPassword(String email, String password) async {
    try {
      UserCredential userCredential = await firebaseAuth
          .signInWithEmailAndPassword(email: email, password: password);
      AppUser user = AppUser(uid: userCredential.user!.uid, email: email);
      return user;
    } catch (e) {
      throw Exception('Login failed: $e');
    }
  }

  @override
  Future<void> logout() async {
    await firebaseAuth.signOut();
  }

  @override
  Future<AppUser?> registerWithEmailPassword(
    String name,
    String email,
    String password,
  ) async {
    try {
      UserCredential userCredential = await firebaseAuth
          .createUserWithEmailAndPassword(email: email, password: password);

      AppUser user = AppUser(uid: userCredential.user!.uid, email: email);
      return user;
    } catch (e) {
      throw Exception('Registration failed: $e');
    }
  }

  @override
  Future<void> sendPasswordResetEmail(String email) async {
    try {
      await firebaseAuth.sendPasswordResetEmail(email: email);
    } catch (e) {
      throw Exception('Reset password failed: $e');
    }
  }
}
import 'package:sailantro/features/auth/domain/models/app_user.dart';

abstract class AuthRepository {
  Future<AppUser?> loginWithEmailPassword(String email, String password);
  Future<AppUser?> registerWithEmailPassword(String name, String email, String password);
  Future<void> logout();
  Future<AppUser?> getCurrentUser();
  Future<void> sendPasswordResetEmail(String email);
  Future<void> deleteAccount();
}
class AppUser {
  final String uid;
  final String email;

  AppUser({
    required this.uid,
    required this.email,
  });

  Map<String, dynamic> toJson(){
    return {
      'uid': uid,
      'email': email,
    };
  }

  factory AppUser.fromJson(Map<String, dynamic> jsonUser) {
    return AppUser(uid: jsonUser['uid'], email: jsonUser['email']);
  }
}import 'package:flutter/foundation.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:sailantro/features/auth/domain/models/app_user.dart';
import 'package:sailantro/features/auth/domain/repository/auth_repository.dart';
import 'package:sailantro/features/auth/presentation/cubits/auth_state.dart';

class AuthCubit extends Cubit<AuthState> {
  final AuthRepository authRepository;
  AppUser? _currentUser;

  AuthCubit({required this.authRepository}) : super(AuthInitial());

  AppUser? get currentUser => _currentUser;

  void checkAuth() async {
    debugPrint('Checking current user auth status...');
    emit(AuthLoading());
    final AppUser? user = await authRepository.getCurrentUser();
    if (user != null) {
      debugPrint('User found: ${user.uid}');
      _currentUser = user;
      emit(Authenticated(user));
    } else {
      debugPrint('No user found. User is unauthenticated.');
      emit(Unauthenticated());
    }
  }

  Future<void> login(String email, String password) async {
    debugPrint('Attempting login for: $email');
    try {
      emit(AuthLoading());
      final user = await authRepository.loginWithEmailPassword(email, password);
      if (user != null) {
        debugPrint('Login successful: ${user.uid}');
        _currentUser = user;
        emit(Authenticated(user));
      } else {
        debugPrint('Login failed: null user returned');
        emit(Unauthenticated());
      }
    } catch (e, stackTrace) {
      debugPrint('Login error: $e');
      debugPrint(stackTrace.toString());

      emit(AuthError("Login failed. Please check your email and password."));
      emit(Unauthenticated());
    }
  }

  Future<void> register(String name, String email, String password) async {
    debugPrint('Starting registration for: $email');
    try {
      emit(AuthLoading());
      final user = await authRepository.registerWithEmailPassword(
        name,
        email,
        password,
      );
      if (user != null) {
        debugPrint('[Auth] Registration successful: ${user.uid}');
        _currentUser = user;
        emit(Authenticated(user));
      } else {
        debugPrint('Registration failed: null user returned');
        emit(Unauthenticated());
      }
    } catch (e) {
      emit(AuthError(e.toString()));
      emit(Unauthenticated());
    }
  }

  Future<void> logout() async {
    debugPrint('Logging out user...');
    emit(AuthLoading());
    try {
      await authRepository.logout();
      debugPrint('Logout successful');
      emit(Unauthenticated());
    } catch (e, stackTrace) {
      debugPrint('Logout error: $e');
      debugPrint(stackTrace.toString());
      emit(AuthError("Logout failed. Please try again."));
      emit(Unauthenticated());
    }
  }

  Future<String> forgotPassword(String email) async {
    debugPrint('Sending password reset email to: $email');
    try {
      await authRepository.sendPasswordResetEmail(email);
      debugPrint('Password reset email sent successfully');
      return "Password reset email sent. Please check your inbox.";
    } catch (e, stackTrace) {
      debugPrint('Password reset error: $e');
      debugPrint(stackTrace.toString());
      return "Failed to send password reset email. Please try again.";
    }
  }

  Future<void> delete() async {
    debugPrint('Attempting to delete user account...');

    try {
      emit(AuthLoading());
      await authRepository.deleteAccount();
      debugPrint('Account deleted successfully');
      emit(Unauthenticated());
    } catch (e, stackTrace) {
      debugPrint('Account deletion error: $e');
      debugPrint(stackTrace.toString());
      emit(AuthError("Account deletion failed. Please try again."));
      emit(Unauthenticated());
    }
  }

}
import 'package:sailantro/features/auth/domain/models/app_user.dart';

abstract class AuthState{}
class AuthInitial extends AuthState {}
class AuthLoading extends AuthState {}
class Authenticated extends AuthState {
  final AppUser user;

  Authenticated(this.user);
}
class Unauthenticated extends AuthState {}
class AuthError extends AuthState {
  final String message;

  AuthError(this.message);
}

import 'package:flutter/material.dart';

class AuthTextField extends StatelessWidget {
  final TextEditingController controller;
  final String hintText;
  final bool obscureText;
  final bool autocorrect;

  const AuthTextField({
    super.key,
    required this.controller,
    required this.hintText,
    required this.obscureText,
    this.autocorrect = true,
  });

  @override
  Widget build(BuildContext context) {
    return TextField(
      controller: controller,
      obscureText: obscureText,
      autocorrect: autocorrect,
      decoration: InputDecoration(
        // border when unselected
        enabledBorder: OutlineInputBorder(
          borderSide: BorderSide(color: Theme.of(context).colorScheme.tertiary),
          borderRadius: BorderRadius.circular(12),
        ),

        // border when selected
        focusedBorder: OutlineInputBorder(
          borderSide: BorderSide(color: Theme.of(context).colorScheme.primary),
          borderRadius: BorderRadius.circular(12),
        ),
        hintText: hintText,
        hintStyle: TextStyle(color: Theme.of(context).colorScheme.primary),
        fillColor: Theme.of(context).colorScheme.secondary,
        filled: true,
      ),
    );
  }
}
import 'package:flutter/material.dart';

class AuthProgressIndicator extends StatelessWidget {
  const AuthProgressIndicator({super.key});

  @override
  Widget build(BuildContext context) {
    return const Scaffold(
      body: Center(child: CircularProgressIndicator()),
    );
  }
}
import 'package:flutter/material.dart';

class AuthButton extends StatelessWidget {
  final void Function()? onTap;
  final String text;

  const AuthButton({
    super.key,
    required this.onTap,
    required this.text,
  });

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: onTap,
      child: Container(
        padding: const EdgeInsets.all(25),
        decoration: BoxDecoration(
          // color of button
          color: Theme.of(context).colorScheme.tertiary,

          // curve corners
          borderRadius: BorderRadius.circular(12),
        ),
        child: Center(
          child: Text(
            text,
            style: const TextStyle(
              fontWeight: FontWeight.bold,
              fontSize: 16,
            ),
          ),
        ),
      ),
    );
  }
}import 'package:email_validator/email_validator.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:go_router/go_router.dart';
import 'package:sailantro/features/auth/presentation/cubits/auth_cubit.dart';

import '../../../../core/router/routes.dart';
import '../components/auth_button.dart';
import '../components/auth_text_field.dart';

class RegisterPage extends StatefulWidget {

  const RegisterPage({super.key});

  @override
  State<RegisterPage> createState() => _RegisterPageState();
}

class _RegisterPageState extends State<RegisterPage> {
  final nameController = TextEditingController();
  final emailController = TextEditingController();
  final passwordController = TextEditingController();
  final confirmPasswordController = TextEditingController();

  bool isValidEmail(String email) {
    return EmailValidator.validate(email.trim());
  }

  void register() {
    final name = nameController.text.trim();
    final email = emailController.text.trim().toLowerCase();
    final password = passwordController.text.trim();
    final confirmPassword = confirmPasswordController.text.trim();

    final authCubit = context.read<AuthCubit>();

    if (name.isEmpty ||
        email.isEmpty ||
        password.isEmpty ||
        confirmPassword.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text("Please complete all fields!")),
      );
      return;
    }

    if (!isValidEmail(email)) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text("Please enter a valid email address.")),
      );
      return;
    }

    if (password != confirmPassword) {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(const SnackBar(content: Text("Passwords do not match.")));
      return;
    }

    authCubit.register(name, email, password);
  }

  @override
  void dispose() {
    nameController.dispose();
    emailController.dispose();
    passwordController.dispose();
    confirmPasswordController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Center(
        child: Padding(
          padding: const EdgeInsets.symmetric(horizontal: 25.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(
                Icons.lock_open,
                size: 80,
                color: Theme.of(context).colorScheme.primary,
              ),
              const SizedBox(height: 25),
              Text(
                "Let's create an account for you",
                style: TextStyle(
                  fontSize: 24,
                  color: Theme.of(context).colorScheme.primary,
                ),
              ),
              const SizedBox(height: 25),
              AuthTextField(
                controller: nameController,
                hintText: "Name",
                obscureText: false,
                autocorrect: false,
              ),
              const SizedBox(height: 10),
              AuthTextField(
                controller: emailController,
                hintText: "Email",
                obscureText: false,
                autocorrect: false,
              ),
              const SizedBox(height: 10),
              AuthTextField(
                controller: passwordController,
                hintText: "Password",
                obscureText: true,
              ),
              const SizedBox(height: 10),
              AuthTextField(
                controller: confirmPasswordController,
                hintText: "Confirm Password",
                obscureText: true,
              ),

              const SizedBox(height: 25),
              AuthButton(text: "SING UP ", onTap: register),
              const SizedBox(height: 25),
              Row(
                children: [
                  Text(
                    "Already have an account?",
                    style: TextStyle(
                      color: Theme.of(context).colorScheme.primary,
                    ),
                  ),
                  GestureDetector(
                    onTap: (){
                      context.go(RoutePaths.authLogin);
                    },
                    child: Text(
                      " Login now",
                      style: TextStyle(
                        color: Theme.of(context).colorScheme.primary,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }
}
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:go_router/go_router.dart';

import '../../../../core/router/routes.dart';
import '../components/auth_button.dart';
import '../components/auth_text_field.dart';
import '../cubits/auth_cubit.dart';
import '../cubits/auth_state.dart';

class LoginPage extends StatefulWidget {
  const LoginPage({super.key});

  @override
  State<LoginPage> createState() => _LoginPageState();
}

class _LoginPageState extends State<LoginPage> {
  final emailController = TextEditingController();
  final passwordController = TextEditingController();

  void login() {
    final String email = emailController.text.trim().toLowerCase();
    final String password = passwordController.text.trim();

    final authCubit = context.read<AuthCubit>();

    if (email.isNotEmpty && password.isNotEmpty) {
      authCubit.login(email, password);
    } else {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(SnackBar(content: Text("Please complete all fields!")));
    }
  }

  @override
  Widget build(BuildContext context) {
    return BlocConsumer(
      builder: (BuildContext context, state) {
        final isLoading = state is AuthLoading;
        return Stack(
          children: [
            _LoginForm(
              emailController: emailController,
              passwordController: passwordController,
              onLogin: login,
            ),
            if (isLoading)
              Container(
                color: Colors.black.withOpacity(0.3),
                child: const Center(child: CircularProgressIndicator()),
              ),
          ],
        );
      },
      listener: (BuildContext context, state) {
        if (state is AuthError) {
          ScaffoldMessenger.of(
            context,
          ).showSnackBar(SnackBar(content: Text(state.message)));
        }
      },
    );
  }
}

class _LoginForm extends StatelessWidget {
  final TextEditingController emailController;
  final TextEditingController passwordController;
  final VoidCallback onLogin;

  const _LoginForm({
    required this.emailController,
    required this.passwordController,
    required this.onLogin,
  });

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Center(
        child: Padding(
          padding: const EdgeInsets.symmetric(horizontal: 25.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(
                Icons.lock_open,
                size: 80,
                color: Theme.of(context).colorScheme.primary,
              ),
              const SizedBox(height: 25),
              Text(
                "S A I L I N G O",
                style: TextStyle(
                  fontSize: 24,
                  color: Theme.of(context).colorScheme.primary,
                ),
              ),
              Text(
                "Duolingo for sailing",
                style: TextStyle(
                  fontSize: 16,
                  color: Theme.of(context).colorScheme.primary,
                ),
              ),
              const SizedBox(height: 25),
              AuthTextField(
                controller: emailController,
                hintText: "Email",
                obscureText: false,
                autocorrect: false,
              ),
              const SizedBox(height: 10),
              AuthTextField(
                controller: passwordController,
                hintText: "Password",
                obscureText: true,
              ),
              const SizedBox(height: 10),
              Row(
                mainAxisAlignment: MainAxisAlignment.end,
                children: [
                  Text(
                    "Forgot Password?",
                    style: TextStyle(
                      color: Theme.of(context).colorScheme.primary,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 15),
              AuthButton(text: "LOGIN", onTap: onLogin),
              const SizedBox(height: 25),
              Row(
                children: [
                  Text(
                    "Don't have an account?",
                    style: TextStyle(
                      color: Theme.of(context).colorScheme.primary,
                    ),
                  ),
                  GestureDetector(
                    onTap: () {
                      context.go(RoutePaths.authRegister);
                    },
                    child: Text(
                      " Register now",
                      style: TextStyle(
                        color: Theme.of(context).colorScheme.primary,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }
}
// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      throw UnsupportedError(
        'DefaultFirebaseOptions have not been configured for web - '
        'you can reconfigure this by running the FlutterFire CLI again.',
      );
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions android = FirebaseOptions(
    apiKey: 'AIzaSyDTHc0yJJ0eM_bUYMW7LJ0dNRAHvhjfYEA',
    appId: '1:395316888728:android:8b11d447f392ad5345fced',
    messagingSenderId: '395316888728',
    projectId: 'sailantro-d8a5e',
    storageBucket: 'sailantro-d8a5e.firebasestorage.app',
  );

  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: 'AIzaSyACshIOMp3170bP59yEkdKj6dwAF_lVp60',
    appId: '1:395316888728:ios:a474ae534fbf897945fced',
    messagingSenderId: '395316888728',
    projectId: 'sailantro-d8a5e',
    storageBucket: 'sailantro-d8a5e.firebasestorage.app',
    iosBundleId: 'com.sailantro',
  );
}
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:sailantro/features/auth/data/firebase_auth_repository.dart';
import 'package:sailantro/features/auth/presentation/cubits/auth_cubit.dart';
import 'package:sailantro/firebase_options.dart';
import 'package:sailantro/themes/dark_mode.dart';
import 'package:sailantro/themes/light_mode.dart';

import 'core/router/app_router.dart';
import 'features/auth/presentation/components/auth_progress_indicator.dart';
import 'features/home/presentation/pages/home_page.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  MyApp({super.key});

  final firebaseAuthRepo = FirebaseAuthRepository();

  @override
  Widget build(BuildContext context) {
    return MultiBlocProvider(
      providers: [
        BlocProvider<AuthCubit>(
          create: (context) =>
          AuthCubit(authRepository: firebaseAuthRepo)..checkAuth(),
        ),
      ],
      child: Builder(
        builder: (context) {
          final authCubit = context.read<AuthCubit>();
          return MaterialApp.router(
            debugShowCheckedModeBanner: false,
            routerConfig: AppRouter.router(authCubit),
            theme: lightMode,
            darkTheme: darkMode,
            themeMode: ThemeMode.light,
          );
        },
      ),
    );
  }
}
import 'package:flutter/material.dart';

ThemeData darkMode = ThemeData(
  colorScheme: ColorScheme.dark(
    // Primary color: A deep, mystical blue, reminiscent of Pandora's bioluminescent elements
    primary: const Color(0xFF1E88E5), // A vibrant blue

    // Secondary color: A darker, muted blue-green for background elements
    secondary: const Color(0xFF004D40), // Dark teal/green

    // Tertiary color: A lighter, more luminous green for accents and interactive elements
    tertiary: const Color(0xFF8BC34A), // Lime green/bright green

    // Inverse Primary: A soft, ethereal glow for text or icons that need to stand out against dark backgrounds
    inversePrimary: const Color(0xFFE0F7FA), // Light cyan/pale blue

    // Surface color: For cards, sheets, and other elevated surfaces – a slightly lighter shade of the secondary
    surface: const Color(0xFF00362C), // Darker teal

    // Error color: A contrasting but still somewhat naturalistic red for warnings/errors
    error: const Color(0xFFD32F2F), // Muted red

    // OnPrimary: Color for text and icons on the primary color
    onPrimary: Colors.white,

    // OnSecondary: Color for text and icons on the secondary color
    onSecondary: Colors.white,

    // OnSurface: Color for text and icons on the surface color
    onSurface: Colors.white70,

    // OnError: Color for text and icons on the error color
    onError: Colors.white,
  ),
  // Scaffold background: The main background color for your app's screens
  scaffoldBackgroundColor: const Color(0xFF0D0D0D), // Very dark, almost black
  // You can also adjust text themes, button themes, etc., here for more detailed styling
  textTheme: const TextTheme(
    bodyLarge: TextStyle(color: Color(0xFFE0F7FA)), // Light text for general content
    bodyMedium: TextStyle(color: Color(0xFFB2EBF2)), // Slightly less bright text
    headlineSmall: TextStyle(color: Color(0xFF8BC34A)), // Green accents for headlines
    // Define other text styles as needed
  ),
  // Further theming for elements like buttons, app bars, etc.
  appBarTheme: const AppBarTheme(
    backgroundColor: Color(0xFF004D40), // Secondary color for AppBar
    foregroundColor: Colors.white, // Text/icon color on AppBar
  ),
  buttonTheme: ButtonThemeData(
    buttonColor: const Color(0xFF1E88E5), // Primary blue for buttons
    textTheme: ButtonTextTheme.primary,
    shape: RoundedRectangleBorder(
      borderRadius: BorderRadius.circular(8.0), // Rounded button corners
    ),
  ),
  // Add more theme properties here for a complete design system
);
import 'package:flutter/material.dart';

/// Sailantro — Light Nautical Theme
/// Palette: Navy (primary), Teal (secondary), Sand (accent), Foam (surface)
const _navy = Color(0xFF0C2A43);
const _teal = Color(0xFF0FA3B1);
const _sand = Color(0xFFFFB13B);
const _foam = Color(0xFFE7F7FA);

final lightMode = ThemeData(
  useMaterial3: true,
  colorScheme: const ColorScheme(
    brightness: Brightness.light,
    primary: _navy,
    onPrimary: Colors.white,
    secondary: _teal,
    onSecondary: Colors.white,
    tertiary: _sand,
    onTertiary: Colors.white,
    surface: Colors.white,
    onSurface: Color(0xFF0C2A43),
    error: Color(0xFFE63946),
    onError: Colors.white,
    primaryContainer: Color(0xFF1A415F),
    onPrimaryContainer: Colors.white,
    secondaryContainer: Color(0xFFBCE9EE),
    onSecondaryContainer: Color(0xFF0C2A43),
    tertiaryContainer: Color(0xFFFFE2B8),
    onTertiaryContainer: Color(0xFF5B3B00),
    outline: Color(0xFF8EA3B5),
    outlineVariant: Color(0xFFE1E8EF),
    scrim: Colors.black54,
    shadow: Colors.black12,
    inversePrimary: Color(0xFFB3CCE5),
    inverseSurface: Color(0xFF0F2130),
    onInverseSurface: Colors.white,
  ),
  scaffoldBackgroundColor: _foam,

  // Typography tuned for iOS look (larger titles, heavy weights on headlines)
  textTheme: Typography.blackCupertino.copyWith(
    titleLarge: const TextStyle(fontWeight: FontWeight.w800, letterSpacing: .2),
    titleMedium: const TextStyle(fontWeight: FontWeight.w700),
    bodyLarge: const TextStyle(height: 1.25),
  ),

  appBarTheme: const AppBarTheme(
    backgroundColor: _foam,
    foregroundColor: _navy,
    elevation: 0,
    centerTitle: true,
  ),


  inputDecorationTheme: InputDecorationTheme(
    filled: true,
    fillColor: Colors.grey.shade100,
    contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 16),
    border: OutlineInputBorder(
      borderRadius: BorderRadius.circular(14),
      borderSide: BorderSide.none,
    ),
    prefixIconColor: _navy,
  ),

  elevatedButtonTheme: ElevatedButtonThemeData(
    style: ElevatedButton.styleFrom(
      minimumSize: const Size.fromHeight(52),
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(28)),
      textStyle: const TextStyle(fontSize: 17, fontWeight: FontWeight.w800, letterSpacing: .2),
    ),
  ),

  filledButtonTheme: FilledButtonThemeData(
    style: FilledButton.styleFrom(
      minimumSize: const Size.fromHeight(48),
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(14)),
      textStyle: const TextStyle(fontWeight: FontWeight.w700),
    ),
  ),

  snackBarTheme: SnackBarThemeData(
    behavior: SnackBarBehavior.floating,
    shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
    backgroundColor: _teal,
    contentTextStyle: const TextStyle(color: Colors.white),
  ),
);
